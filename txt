



php artisan migrate --path=database/migrations/


namespace App\Helpers;

use Illuminate\Support\Facades\Session;

class ExternalAuth
{
    /**
     * Get the current authenticated user from session or simulation
     *
     * @param string $defaultType 'admin' or 'external'
     * @return array|null
     */
    public static function user($defaultType = 'admin')
    {
        // Check if simulation mode is enabled
        if (config('external_auth.simulation_enabled', true)) {
            return self::getSimulatedUser($defaultType);
        }

        // Try to get user from session (from main Spark Clinic app)
        $sessionKeys = config('external_auth.session_keys');
        
        if (Session::has($sessionKeys['user_id'])) {
            return [
                'id' => Session::get($sessionKeys['user_id']),
                'name' => Session::get($sessionKeys['user_name']),
                'email' => Session::get($sessionKeys['user_email']),
                'role' => Session::get($sessionKeys['user_role']),
            ];
        }

        return null;
    }

    /**
     * Get simulated user for development
     *
     * @param string $type
     * @return array|null
     */
    protected static function getSimulatedUser($type)
    {
        $users = config('external_auth.simulated_users', []);
        
        if ($type === 'admin') {
            $userType = config('external_auth.default_admin_user', 'admin');
        } else {
            $userType = config('external_auth.default_external_user', 'external');
        }

        return $users[$userType] ?? null;
    }

    /**
     * Check if user is authenticated
     *
     * @param string $defaultType
     * @return bool
     */
    public static function check($defaultType = 'admin')
    {
        return self::user($defaultType) !== null;
    }

    /**
     * Get user ID
     *
     * @param string $defaultType
     * @return int|null
     */
    public static function id($defaultType = 'admin')
    {
        $user = self::user($defaultType);
        return $user['id'] ?? null;
    }

    /**
     * Check if user is admin
     *
     * @param string $defaultType
     * @return bool
     */
    public static function isAdmin($defaultType = 'admin')
    {
        $user = self::user($defaultType);
        return isset($user['role']) && $user['role'] === 'admin';
    }

    /**
     * Check if user is external staff
     *
     * @param string $defaultType
     * @return bool
     */
    public static function isExternal($defaultType = 'external')
    {
        $user = self::user($defaultType);
        return isset($user['role']) && $user['role'] === 'external';
    }
}


we have two laravel web applications both using spatie/laravel-permission for roles and  permissions
hr and sms from hr we want to redirect it to sms .in sms we want to use sms role and permissions  .so we want on redirect to sms  get hr session and get data from it and in create a new session in sms ,search hr_user_id in sms users if found new session created with matching user_id of sms user that assigned role in sms .if hr_user_if is not found then create a user with $institution_id = $userToken['data']['institution_id'] ?? null;

        $name = $userToken['data']['name'] ?? null;
        $cnic = $userToken['data']['cnic'] ?? null;
        $Role = $userToken['data']['Role'] ?? null;
         $Category = $userToken['data']['Category'] ?? null;
        $password = $userToken['data']['password'] ?? null;
        $user_id = $userToken['data']['user_id'] ?? null;
        $region_id = $userToken['data']['region_id'] ?? null; these data from hr session and create a new user in sms and assign role base on $Category('School','College','Directorate','Regional Office') if 'School','College' assign role institute if Directorate assign Directorate if Regional Offices assign Region 
        